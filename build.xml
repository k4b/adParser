<?xml version="1.0" encoding="UTF-8"?>
<project name="adParser" default="dist">
	<defaultexcludes add="**/CVS"/>
	<property name="program.name" value="adparser"/>
  	<property name="program.package" value="adparser"/>
  	<property name="program.title" value="AdParser"/>
  	<property name="program.version" value="1.0"/>
	<property name="source.dir" value="src/main/java"/>
	<property name="test.dir" value="src/test/java"/>
	<property name="build.dir" value="build"/>
	<property name="build.ver" value="1.0.0-ALPHA"/>
	<property name="dist.dir" value="dist"/>
	<property name="lib.dir" value="lib"/>
	<property name="jarfile" value="${build.dir}/classes/adParser-${build.ver}.jar"/>
	<property name="jarallfile" value="${build.dir}/adParserAll-${build.ver}.jar"/>
	<property name="jarminfile" value="${build.dir}/adParserMin-${build.ver}.jar"/>
	<property name="srczip" value="${dist.dir}/adParser-src-${build.ver}.zip"/>
	<property name="srctgz" value="${dist.dir}/adParser-src-${build.ver}.tgz"/>
	
	<!-- The directories corresponding to your necessary dependencies -->
	<property name="junit.version"           value="4.11"/>
	<property name="junit.dir"              value="${lib.dir}"/>
	<property name="junit.jar"               value="${junit.dir}/junit-${junit.version}.jar"/>
	
  	<!-- Should Java compilations set the 'debug' compiler option? -->
  	<property name="compile.debug"           value="true"/>
	
  	<!-- Should Java compilations set the 'deprecation' compiler option? -->
  	<property name="compile.deprecation"     value="false"/>

  	<!-- Should Java compilations set the 'optimize' compiler option? -->
  	<property name="compile.optimize"        value="true"/>
	
	<!-- Should all tests fail if one does? -->
	<property name="test.failonerror"        value="true"/>

	<!-- The test runner to execute 
	<property name="test.runner"             value="junit.textui.TestRunner"/> -->

	<!-- Construct compile classpath -->
	<path id="compile.classpath">
		<pathelement location="${build.dir}/classes"/>
	</path>

	<path id="classpath">
	    <fileset dir="lib" includes="**/*.jar"/>
	</path>
	
	<!-- Construct unit test classpath -->
	<path id="test.classpath">
		<pathelement location="${build.dir}"/>
		<pathelement location="${build.dir}/classes"/>
		<pathelement location="${build.dir}/test-classes"/>
		<pathelement location="${junit.jar}"/>
		<path refid="classpath"/>
	</path>

	<target name="init" depends="clean">
		<tstamp/>
		<mkdir dir="${build.dir}"/>
	    <mkdir dir="${build.dir}/classes"/>
	    <mkdir dir="${build.dir}/test-classes"/>
		<mkdir dir="${dist.dir}"/>
	</target>

	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

	<target name="compile" depends="init">
		<javac sourcepath="" source="1.7" target="1.7" srcdir="${source.dir}" debug="on" destdir="${build.dir}/classes">
			<classpath refid="compile.classpath"/>
			<classpath refid="classpath"/>
		</javac>
	</target>
	
<!-- ========== Unit Test Targets ========================================= -->

    <target name="compile.tests" depends="compile" description="Compile unit test cases dependent on JDK version">

      <javac srcdir="${test.dir}"
             destdir="${build.dir}/test-classes"
             debug="${compile.debug}"
             deprecation="${compile.deprecation}"
             optimize="${compile.optimize}"
             includeantruntime="false">
          <classpath refid="test.classpath"/>
      </javac>
    </target>

  <target name="test"  depends="compile.tests"	description="Run all unit test cases">
    <mkdir dir="${build.dir}/ant-reports"/>
    <junit printsummary="true" showoutput="true" fork="yes" haltonfailure="${test.failonerror}">
      <classpath refid="test.classpath"/>
      <formatter type="plain" usefile="true" />
      <!-- If test.entry is defined, run a single test, otherwise run all valid tests -->
      <test name="${test.entry}" if="test.entry"/>
      <batchtest todir="${build.dir}/ant-reports" unless="test.entry">
        <fileset dir="${test.dir}">
          <include name="**/*Test*.java"/>
          <!-- Test support files -->
          <exclude name="**/testtools/**"/>
          <!-- Ant JUnit does not handle abstract classes -->
          <exclude name="**/*AbstractTestCase*"/>
            <exclude name="**/Abstract*TestCase*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

	<target name="javadoc" depends="compile" description="Create program Javadoc documentation">
	    <mkdir dir="${build.dir}/apidocs"/>
	    <tstamp>
	        <format property="current.year" pattern="yyyy"/>
	    </tstamp>
	    <javadoc sourcepath="${source.dir}"
	                destdir="${build.dir}/apidocs"
	           packagenames="adparser.*"
	                 author="true"
	                private="true"
	                version="true"
	               doctitle="&lt;h1&gt;${component.title} ${component.version}&lt;/h1&gt;"
	            windowtitle="${component.title} ${component.version}"
	                 bottom="Copyright Karol Abramczyk">
	           <classpath refid="classpath" />
	        <link href="http://java.sun.com/javaee/5/docs/api/"/>
	        <link href="http://download.oracle.com/javase/1.5.0/docs/api/index.html"/>
	    </javadoc>
	  </target>

	<target name="jar" depends="compile">
		<copy todir="${build.dir}">
			<fileset dir=".">
				<include name="*stopwords*"/>
			</fileset>
		</copy>
		<copy todir="${build.dir}/classes/lib">
			<fileset dir="lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<jar jarfile="${jarfile}" excludes="adParser*.jar,apidocs/">
			<fileset dir="${build.dir}/classes"/>
			<manifest>
				<attribute name="Main-Class" value="adparser.AdParser"/>
				<attribute name="Class-Path" value=". ./classes lib/jsoup-1.7.2.jar lib/commons-codec-1.6.jar lib/commons-logging-1.1.1.jar lib/google-gson-2.2.4-release.zip lib/gson-2.2.3.jar lib/hamcrest-core-1.3.jar lib/httpclient-4.2.5.jar lib/httpcore-4.2.4.jar lib/junit-4.11.jar lib/lightcouch-0.0.6.jar lib/morfologik-fsa-1.6.0.jar lib/morfologik-polish-1.6.0.jar lib/morfologik-stemming-1.6.0.jar"/>
			</manifest>
		</jar>
	</target>

	<target name="dist" depends="clean,jar, javadoc">
		<fileset dir=".">
			<patternset id="distfiles">
				<exclude name="eclipse/**"/>
				<exclude name="extras/**"/>
				<exclude name="sandbox/**"/>
				<exclude name="index/**"/>
			    	<exclude name="${build.dir}/**"/>
				<exclude name="${dist.dir}/**"/>
			</patternset>
		</fileset>
		<copy todir="${dist.dir}">
			<fileset dir="lib"/>
			<fileset file="./plstopwordsUTF8.txt"/>
			<fileset file="./stopwords"/>
			<fileset file="${jarfile}"/>
			<fileset file="${jarallfile}"/>
			<fileset file="${jarminfile}"/>
		</copy>
		<zip destfile="${srczip}">
			<zipfileset dir="." prefix="adParser-${build.ver}">
				<patternset refid="distfiles"/>
			</zipfileset>
		</zip>
		<tar compression="gzip" destfile="${srctgz}">
			<tarfileset dir="." prefix="adParser-${build.ver}">
				<patternset refid="distfiles"/>
			</tarfileset>
		</tar>


		<!-- Binary files and documentation Zip -->
		<zip destfile="${dist.dir}/AdParser-binary-${build.ver}.zip" basedir="${build.dir}">
		</zip>

		<!-- Souces Zip -->
		<mkdir dir="${dist.dir}/sources/src"/>
		<copy todir="${dist.dir}/sources/src">
		    <fileset dir="src"/>
		</copy>
		<copy todir="${dist.dir}/sources">
		    <fileset dir=".">
				<include name="*stopwords*"/>
			</fileset>
		</copy>
		<zip destfile="${dist.dir}/AdParser-sources-${build.ver}.zip" basedir="${dist.dir}/sources">
		</zip>
		<delete dir="${dist.dir}/sources" />
	</target>

	<target name="run" depends="jar">
    	<java classname="adparser.AdParser">
         <classpath>
         	<path refid="compile.classpath" />
         	<path refid="classpath" />
         </classpath>
       </java>
       
    </target>

    <target name="run-from-jar" depends="jar">
    	<java jar="${jarfile}" fork="true" classpathref="classpath">
       </java>
    </target>

</project>
